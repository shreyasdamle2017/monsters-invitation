{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","key","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAIaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACxB,6BAAqBL,EAAMI,QAAQE,MAA1BN,EAAMO,KACf,4BAAIP,EAAMI,QAAQI,YCJjBC,G,MAAW,SAACT,GACrB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,WCJhBO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOC,KAAK,SACZd,UAAU,SACVY,YAAaA,EACbG,SAAUF,MCoCCG,E,kDArCb,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAblC,EAAKC,MAAQ,CACXb,SAAS,GACTU,YAAY,IAJL,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAASkB,S,oBAOxC,WAAS,IAAD,EAE4BC,KAAKN,MAA/Bb,EAFF,EAEEA,SAAUU,EAFZ,EAEYA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAEpD,OACI,sBAAK/B,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CACEY,YAAY,qBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAYoB,W,GAhCZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7d76730f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return(\r\n        <div className='card-container'>\r\n            <img alt = \"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h1 key={props.key}>{props.monster.name}</h1>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    return(<div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n          <Card key={monster.id} monster = {monster}/>\r\n          ))}\r\n        \r\n    </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input type='search'\r\n    className='search'\r\n    placeholder={placeholder} \r\n    onChange={handleChange}\r\n    />       \r\n);","import './App.css';\nimport React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n      this.state = {\n        monsters:[],\n        searchField:''\n    };\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => this.setState({ monsters:users }))\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField:e.target.value});\n  };\n\n  render(){\n\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n  return (\n      <div className=\"App\">\n        <h1>Monsters Cards</h1>\n        <SearchBox \n          placeholder='Enter Monster Name'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters = {filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}